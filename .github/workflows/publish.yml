name: Publish site

on:
  push:
    branches:
    - master
    paths-ignore:
    - 'README.md'

jobs:
  publish_site:

    env:
      BASEDIR: ${{github.workspace}}/..

    runs-on: ubuntu-16.04

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        architecture: x64
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1
    - name: Checkout orchestrator
      run: |
        cd $BASEDIR
        git clone https://github.com/arrow-kt/arrow.git
    - name: Prepare environment
      run: |
        set -ex
        sudo pip install awscli
        aws --version
        $BASEDIR/arrow/scripts/site-prepare-env.sh
        sudo apt-get install tree
        bundle install --gemfile Gemfile --path vendor/bundle
    - name: "Site: run Ank"
      env:
        JAVA_OPTS: -Xms512m -Xmx1024m
      run: ./gradlew runAnk
    - name: "Site: build"
      env:
        JAVA_OPTS: -Xms512m -Xmx1024m
        JEKYLL_ENV: production
      run: |
        bundle exec jekyll build -s build/site -d build/_site
        mkdir $BASEDIR/logs
        tree build/_site > $BASEDIR/logs/docs.log
    - name: "Site: publish"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: |
        echo ">>> SITE" > aws_sync_jekyll.log
        cd build/_site/
        for file in *; do
            if [ -f "$file" ]; then
                echo "Copying $file ..."
                aws s3 cp $file s3://$S3_BUCKET/$file >> aws_sync_jekyll.log
            else
                echo "Sync $file ..."
                aws s3 sync $file s3://$S3_BUCKET/$file --delete >> aws_sync_jekyll.log
            fi
        done
    - name: "Next version: generate and validate docs for all the libraries"
      run: |
        for repository in $(cat $BASEDIR/arrow/lists/libs.txt); do
            cd $BASEDIR ; git clone https://github.com/arrow-kt/$repository.git
            $BASEDIR/arrow/scripts/project-run-dokka.sh $repository
            echo "include 'arrow-docs'" >> $BASEDIR/$repository/settings.gradle
            $BASEDIR/arrow/scripts/project-run-ank.sh $repository
            #$BASEDIR/arrow/scripts/project-locate-doc.sh $repository
            cp -r $BASEDIR/$repository/arrow-docs/build/site/* $BASEDIR/arrow-site/build/site/
        done
    - name: "Next version: build"
      env:
        JAVA_OPTS: -Xms512m -Xmx1024m
        JEKYLL_ENV: production
      run: |
        bundle exec jekyll build -b docs/next -s build/site -d build/_site
        rm -f build/_site/index.*
        tree build/_site > $BASEDIR/logs/docs-next.log
    - name: "Next version: publish"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: |
        echo ">>> NEXT VERSION" >> aws_sync_jekyll.log
        aws s3 sync build/_site s3://$S3_BUCKET/docs/next --delete >> aws_sync_jekyll.log
    - name: "Other versions: generate, validate, build and publish"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: |
        . $BASEDIR/arrow/scripts/commons4gradle.sh
        if [ -f $BASEDIR/arrow-site/update-other-versions.txt ]; then
            for version in $(cat update-other-versions.txt); do
                echo "Update $version ..."
                SHORT_VERSION=$(echo $version | cut -d. -f1-2)
                cd $BASEDIR/arrow-site
                cp sidebar/$SHORT_VERSION/* docs/_data/
                sed -i "s/latest/$version/g" docs/_includes/_head-docs.html
                ./gradlew clean runAnk
                cd $BASEDIR/arrow
                git checkout $version
                sed -i "s/^VERSION_NAME.*/VERSION_NAME=$version/g" gradle.properties
                OSS_REPOSITORY="https://oss.jfrog.org/artifactory/oss-snapshot-local/"
                BINTRAY_REPOSITORY="https://dl.bintray.com/arrow-kt/arrow-kt/"
                sed -i "s/maven { url \"$(escapeURL $OSS_REPOSITORY)\" }/maven { url \"$(escapeURL $BINTRAY_REPOSITORY)\" }/g" generic-conf.gradle
                for repository in $(cat $BASEDIR/arrow/lists/libs.txt); do
                    cd $BASEDIR/$repository
                    git checkout $version
                    replaceGlobalPropertiesbyLocalConf gradle.properties
                    if [ -f arrow-docs/build.gradle ]; then
                        sed -i "s/maven { url \"$(escapeURL $OSS_REPOSITORY)\" }/maven { url \"$(escapeURL $BINTRAY_REPOSITORY)\" }/g" arrow-docs/build.gradle
                    fi
                    $BASEDIR/arrow/scripts/project-run-dokka.sh $repository
                    echo "include 'arrow-docs'" >> $BASEDIR/$repository/settings.gradle
                    $BASEDIR/arrow/scripts/project-run-ank.sh $repository
                    #$BASEDIR/arrow/scripts/project-locate-doc.sh $repository
                    cp -r $BASEDIR/$repository/arrow-docs/build/site/* $BASEDIR/arrow-site/build/site/
                done
                cd $BASEDIR/arrow-site
                bundle exec jekyll build -b docs/$SHORT_VERSION -s build/site -d build/_site
                rm -f build/_site/index.*
                tree build/_site > $BASEDIR/logs/docs-${SHORT_VERSION}.log
                echo ">>> $SHORT_VERSION VERSION" >> aws_sync_jekyll.log
                aws s3 sync build/_site s3://$S3_BUCKET/docs/$SHORT_VERSION --delete >> aws_sync_jekyll.log
            done
        fi
    - name: "Site: generate sitemap.xml"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: |
        LAST_MAJOR_MINOR_VERSION=$(git describe --abbrev=0 | cut -d. -f1-2)
        echo '<?xml version="1.0" encoding="UTF-8"?>' > sitemap.xml
        echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' >> sitemap.xml
        aws s3 ls s3://$S3_BUCKET/docs/$LAST_MAJOR_MINOR_VERSION --recursive > docs-content.log
        grep index.html docs-content.log > docs-pages.log
        while read line; do
          PAGE_DATE=$(echo $line | cut -d' ' -f1)
          PAGE_PATH=$(echo $line | cut -d' ' -f4)
          echo "<url><loc>https://arrow-kt.io/${PAGE_PATH}</loc><lastmod>${PAGE_DATE}</lastmod></url>"
        done < docs-pages.log >> sitemap.xml
        echo '</urlset>' >> sitemap.xml
    - name: "Site: publish sitemap.xml"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: aws s3 cp sitemap.xml s3://$S3_BUCKET/sitemap.xml >> aws_sync_jekyll.log
    - name: CloudFront cache invalidation
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_CLOUDFRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
      run: aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_ID --paths "/*"
    - name: List S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: aws s3 ls s3://$S3_BUCKET --recursive --summarize > site-content.log
    - uses: actions/upload-artifact@v1
      with:
        name: site-content
        path: site-content.log
    - uses: actions/upload-artifact@v1
      with:
        name: log
        path: aws_sync_jekyll.log
