name: Publish site

on:
  workflow_dispatch:
  push:
    branches:
    - master
    paths-ignore:
    - 'README.md'

jobs:
  publish_site:

    env:
      BASEDIR: ${{github.workspace}}/..
      JAVA_OPTS: -Xms512m -Xmx1024m
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_CLOUDFRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
      JEKYLL_ENV: production

    runs-on: macos-latest
    if: github.ref == 'refs/heads/master' # because of workflow_dispatch allows to choose a branch

    steps:
    - uses: actions/checkout@v1
    - name: Checkout orchestrator
      run: |
        cd $BASEDIR
        git clone https://github.com/arrow-kt/arrow.git
        git clone https://github.com/arrow-kt/arrow.git arrow-master
    - name: Prepare environment
      run: |
        mkdir $BASEDIR/logs
        brew install tree
        bundle install --gemfile Gemfile --path vendor/bundle
    - name: "Landing page: build"
      run: |
        ./scripts/checkout-latest-landingpage.sh
        bundle exec jekyll build -b docs -s docs
        tree _site > $BASEDIR/logs/content_landingpage.log
    - name: "Landing page: publish"
      run: ./scripts/publish-landingpage.sh
    - name: "Next version: generate and validate docs for all the libraries"
      run: |
        . $BASEDIR/arrow-master/scripts/commons4gradle.sh
        for repository in $(cat $BASEDIR/arrow/lists/libs.txt); do
            checkAndDownload $repository
            addArrowDocs $BASEDIR/$repository/settings.gradle
            $BASEDIR/arrow-master/scripts/project-generate-and-validate-doc.sh $repository
        done
    - name: "Next version: build"
      run: |
        rm -f docs/index.md
        bundle exec jekyll build -b docs/next -s docs
        tree _site > $BASEDIR/logs/content_docs-next.log
    - name: "Next version: publish"
      run: |
        echo ">>> NEXT VERSION" >> $BASEDIR/logs/aws_sync.log
        aws s3 sync _site s3://$S3_BUCKET/docs/next --delete >> $BASEDIR/logs/aws_sync.log
    #- name: "Latest release: generate and validate docs for all the libraries"
    #  run: |
    #    export VERSION=$(grep LATEST_VERSION $BASEDIR/arrow-master/gradle.properties | cut -d= -f2)
    #    git clone https://github.com/arrow-kt/arrow-site.git $BASEDIR/arrow-site-$VERSION
    #    LAST_TAG=$(git tag -l --sort=version:refname ${VERSION}* | tail -1)
    #    echo ">> Last tag: $LAST_TAG"
    #    cd $BASEDIR/arrow-site-$VERSION; git checkout $LAST_TAG; cd -
    #    ./scripts/generate-and-validate-doc.sh
    #- name: "Latest release: build"
    #  run: |
    #    bundle exec jekyll build -b docs -s docs
    #    tree _site > $BASEDIR/logs/content_docs.log
    #- name: "Latest release: publish"
    #  run: |
    #    echo ">>> Latest release" >> $BASEDIR/logs/aws_sync.log
    #    ./scripts/publish-latest-release.sh
    #- name: "Other versions: generate, validate, build and publish"
    #  run: |
    #    if [ -f $BASEDIR/arrow-site/update-other-versions.txt ]; then
    #        for version in $(cat update-other-versions.txt); do
    #            export VERSION=$version
    #            export SHORT_VERSION=$(echo $VERSION | cut -d. -f1-2)
    #            git clone https://github.com/arrow-kt/arrow-site.git $BASEDIR/arrow-site-$VERSION
    #            LAST_TAG=$(git tag -l --sort=version:refname ${VERSION}* | tail -1)
    #            echo ">> Last tag: $LAST_TAG"
    #            cd $BASEDIR/arrow-site-$VERSION; git checkout $LAST_TAG; cd -
    #            ./scripts/generate-and-validate-doc.sh
    #            cd $BASEDIR/arrow-site
    #            rm -f docs/index.md
    #            bundle exec jekyll build -b docs/$SHORT_VERSION -s docs
    #            tree _site > $BASEDIR/logs/content_docs-${SHORT_VERSION}.log
    #            echo ">>> $SHORT_VERSION VERSION" >> $BASEDIR/logs/aws_sync.log
    #            aws s3 sync _site s3://$S3_BUCKET/docs/$SHORT_VERSION --delete >> $BASEDIR/logs/aws_sync.log
    #        done
    #    fi
    - name: "Site: generate sitemap.xml"
      run: |
        echo '<?xml version="1.0" encoding="UTF-8"?>' > sitemap.xml
        echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' >> sitemap.xml
        aws s3 ls s3://$S3_BUCKET/docs --recursive > docs-content.log
        grep -e " docs/[^0-9|next].*index.html$" docs-content.log > $BASEDIR/logs/main-pages.log
        while read line; do
          PAGE_DATE=$(echo $line | cut -d' ' -f1)
          PAGE_PATH=$(echo $line | cut -d' ' -f4)
          echo "<url><loc>https://arrow-kt.io/${PAGE_PATH}</loc><lastmod>${PAGE_DATE}</lastmod></url>"
        done < $BASEDIR/logs/main-pages.log >> sitemap.xml
        echo '</urlset>' >> sitemap.xml
    - name: "Site: publish sitemap.xml"
      run: aws s3 cp sitemap.xml s3://$S3_BUCKET/sitemap.xml >> $BASEDIR/logs/aws_sync.log
    - name: CloudFront cache invalidation
      run: aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_ID --paths "/*"
    - name: List S3
      run: aws s3 ls s3://$S3_BUCKET --recursive --summarize > $BASEDIR/logs/site-content.log
    - uses: actions/upload-artifact@v1
      with:
        name: logs
        path: ../logs
