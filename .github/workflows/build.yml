name: Build site

on:
  pull_request:
    paths-ignore:
    - 'README.md'

jobs:
  build_site:

    env:
      BASEDIR: ${{github.workspace}}/..
      JAVA_OPTS: -Xms512m -Xmx1024m

    runs-on: ubuntu-16.04

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        architecture: x64
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1
    - name: Checkout orchestrator
      run: |
        cd $BASEDIR
        git clone https://github.com/arrow-kt/arrow.git
        git clone https://github.com/arrow-kt/arrow.git arrow-master
    - name: Prepare environment
      run: |
        set -ex
        mkdir $BASEDIR/logs
        $BASEDIR/arrow-master/scripts/site-prepare-env.sh
        sudo apt-get install tree
        bundle install --gemfile Gemfile --path vendor/bundle
    - name: "Site: run Ank"
      run: ./gradlew runAnk
    - name: "Site: build"
      run: |
        bundle exec jekyll build -s build/site -d build/_site
        tree build/_site > $BASEDIR/logs/content.log
    - name: "Next version: generate and validate docs for all the libraries"
      run: |
        . $BASEDIR/arrow-master/scripts/commons4gradle.sh
        for repository in $(cat $BASEDIR/arrow/lists/libs.txt); do
            cd $BASEDIR ; git clone https://github.com/arrow-kt/$repository.git; cd $repository
            addArrowDocs $BASEDIR/$repository/settings.gradle
            $BASEDIR/arrow-master/scripts/project-generate-and-validate-doc.sh $repository
        done
    - name: "Next version: build"
      run: |
        bundle exec jekyll build -b docs/next -s build/site -d build/_site
        rm -f build/_site/index.*
        tree build/_site > $BASEDIR/logs/content_docs-next.log
    - name: "Latest release: generate and validate docs for all the libraries"
      run: |
        . $BASEDIR/arrow-master/scripts/commons4gradle.sh
        LAST_TAG=$(git describe --abbrev=0 --tags)
        SHORT_VERSION=$(echo $LAST_TAG | cut -d. -f1-2)
        cp sidebar/$SHORT_VERSION/* docs/_data/
        sed -i "s/latest/$LAST_TAG/g" docs/_includes/_head-docs.html
        ./gradlew clean runAnk
        cd $BASEDIR/arrow
        git checkout .; git checkout $LAST_TAG
        sed -i "s/^VERSION_NAME.*/VERSION_NAME=$LAST_TAG/g" gradle.properties
        replaceOSSbyBintrayRepository generic-conf.gradle
        # TODO: Remove when releasing 0.11.0
        cp $BASEDIR/arrow-master/doc-conf.gradle $BASEDIR/arrow/
        for repository in $(cat $BASEDIR/arrow/lists/libs.txt); do
            cd $BASEDIR/$repository
            git checkout .; git checkout $LAST_TAG
            replaceGlobalPropertiesbyLocalConf gradle.properties
            if [ -f arrow-docs/build.gradle ]; then
                replaceOSSbyBintrayRepository arrow-docs/build.gradle
            fi
            addArrowDocs $BASEDIR/$repository/settings.gradle
            $BASEDIR/arrow-master/scripts/project-assemble.sh $repository
            $BASEDIR/arrow-master/scripts/project-run-dokka.sh $repository
            $BASEDIR/arrow-master/scripts/project-run-ank.sh $repository
            $BASEDIR/arrow-master/scripts/project-locate-doc.sh $repository
        done
    - name: "Latest release: build"
      run: |
        bundle exec jekyll build -b docs -s build/site -d build/_site
        rm -f build/_site/index.*
        tree build/_site > $BASEDIR/logs/content_docs.log
    - name: "Other versions: generate and validate docs for all the libraries"
      run: |
        . $BASEDIR/arrow-master/scripts/commons4gradle.sh
        if [ -f $BASEDIR/arrow-site/update-other-versions.txt ]; then
            for version in $(cat update-other-versions.txt); do
                SHORT_VERSION=$(echo $version | cut -d. -f1-2)
                cd $BASEDIR/arrow-site
                git checkout .
                cp sidebar/$SHORT_VERSION/* docs/_data/
                sed -i "s/latest/$version/g" docs/_includes/_head-docs.html
                ./gradlew clean runAnk
                cd $BASEDIR/arrow
                git checkout .; git checkout $version
                sed -i "s/^VERSION_NAME.*/VERSION_NAME=$version/g" gradle.properties
                replaceOSSbyBintrayRepository generic-conf.gradle
                # TODO: Remove when releasing 0.11.0
                cp $BASEDIR/arrow-master/doc-conf.gradle $BASEDIR/arrow/
                for repository in $(cat $BASEDIR/arrow/lists/libs.txt); do
                    cd $BASEDIR/$repository
                    git checkout .; git checkout $version
                    replaceGlobalPropertiesbyLocalConf gradle.properties
                    if [ -f arrow-docs/build.gradle ]; then
                        replaceOSSbyBintrayRepository arrow-docs/build.gradle
                    fi
                    addArrowDocs $BASEDIR/$repository/settings.gradle
                    $BASEDIR/arrow-master/scripts/project-assemble.sh $repository
                    $BASEDIR/arrow-master/scripts/project-run-dokka.sh $repository
                    $BASEDIR/arrow-master/scripts/project-run-ank.sh $repository
                    $BASEDIR/arrow-master/scripts/project-locate-doc.sh $repository
                done
                cd $BASEDIR/arrow-site
                bundle exec jekyll build -b docs/$SHORT_VERSION -s build/site -d build/_site
                rm -f build/_site/index.*
                tree build/_site > $BASEDIR/logs/content_docs-${SHORT_VERSION}.log
            done
        fi
    - name: "Site: generate sitemap.xml"
      run: |
        echo '<?xml version="1.0" encoding="UTF-8"?>' > sitemap.xml
        echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' >> sitemap.xml
        aws s3 ls s3://$S3_BUCKET/docs --recursive > docs-content.log
        grep -e " docs/[^0-9|next].*index.html$" docs-content.log > $BASEDIR/logs/main-pages.log
        while read line; do
          PAGE_DATE=$(echo $line | cut -d' ' -f1)
          PAGE_PATH=$(echo $line | cut -d' ' -f4)
          echo "<url><loc>https://arrow-kt.io/${PAGE_PATH}</loc><lastmod>${PAGE_DATE}</lastmod></url>"
        done < $BASEDIR/logs/main-pages.log >> sitemap.xml
        echo '</urlset>' >> sitemap.xml
        cp sitemap.xml $BASEDIR/logs/
    - uses: actions/upload-artifact@v1
      with:
        name: logs
        path: ../logs
