name: Build site

on:
  pull_request:
    paths-ignore:
    - 'README.md'

jobs:
  build_site:

    env:
      BASEDIR: ${{github.workspace}}/..
      JAVA_OPTS: -Xms512m -Xmx1024m

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1
    - name: Checkout orchestrator
      run: |
        cd $BASEDIR
        git clone https://github.com/arrow-kt/arrow.git
    - name: Prepare environment
      run: |
        set -ex
        mkdir $BASEDIR/logs
        brew install tree
        bundle install --gemfile Gemfile --path vendor/bundle
    - name: "Site: run Ank"
      run: ./gradlew runAnk
    - name: "Site: build"
      run: |
        bundle exec jekyll build -s build/site -d build/_site
        tree build/_site > $BASEDIR/logs/content.log
    - name: "Next version: generate and validate docs for all the libraries"
      run: |
        . $BASEDIR/arrow/scripts/commons4gradle.sh
        for repository in $(cat $BASEDIR/arrow/lists/libs.txt); do
            cd $BASEDIR ; git clone https://github.com/arrow-kt/$repository.git; cd $repository
            addArrowDocs $BASEDIR/$repository/settings.gradle
            $BASEDIR/arrow/scripts/project-generate-and-validate-doc.sh $repository
        done
    - name: "Next version: build"
      run: |
        bundle exec jekyll build -b docs/next -s build/site -d build/_site
        rm -f build/_site/index.*
        tree build/_site > $BASEDIR/logs/content_docs-next.log
    - name: "Latest release: generate and validate docs for all the libraries"
      run: |
        export VERSION=$(git describe --abbrev=0 --tags)
        ./scripts/generate-and-validate-doc.sh
    - name: "Latest release: build"
      run: |
        bundle exec jekyll build -b docs -s build/site -d build/_site
        rm -f build/_site/index.*
        tree build/_site > $BASEDIR/logs/content_docs.log
    - name: "Other versions: generate and validate docs for all the libraries"
      run: |
        if [ -f $BASEDIR/arrow-site/update-other-versions.txt ]; then
            for version in $(cat update-other-versions.txt); do
                export VERSION=$version
                ./scripts/generate-and-validate-doc.sh
                cd $BASEDIR/arrow-site
                bundle exec jekyll build -b docs/$SHORT_VERSION -s build/site -d build/_site
                rm -f build/_site/index.*
                tree build/_site > $BASEDIR/logs/content_docs-${SHORT_VERSION}.log
            done
        fi
    - uses: actions/upload-artifact@v1
      with:
        name: logs
        path: ../logs
